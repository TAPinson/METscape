[{"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\index.js":"1","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\App.js":"2","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Register.js":"6","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Login.js":"7","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Home.js":"8"},{"size":690,"mtime":1611936739824,"results":"9","hashOfConfig":"10"},{"size":626,"mtime":1611943652414,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":2055,"mtime":1611937431486,"results":"13","hashOfConfig":"10"},{"size":5973,"mtime":1611943120819,"results":"14","hashOfConfig":"10"},{"size":6698,"mtime":1611942748355,"results":"15","hashOfConfig":"10"},{"size":2624,"mtime":1611943693723,"results":"16","hashOfConfig":"10"},{"size":412,"mtime":1611943826621,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"hsmdj7",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\index.js",[],["37","38"],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\App.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\ApplicationViews.js",["39"],"import React, { useContext } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport {\r\n    UserProfileContext,\r\n    UserProfileProvider,\r\n} from '../providers/UserProfileProvider';\r\nimport Home from '../pages/Home';\r\nimport Login from '../pages/Login';\r\nimport Register from '../pages/Register';\r\n\r\n\r\n\r\nconst ApplicationViews = () => {\r\n    const { isLoggedIn, isAdmin } = useContext(UserProfileContext);\r\n\r\n    const authLevel = () => {\r\n        if (isLoggedIn && isAdmin()) {\r\n            return (\r\n                <>\r\n                    {/* <TagProvider>\r\n                        <Route path=\"/tags\">\r\n                            <TagManager />\r\n                        </Route>\r\n                    </TagProvider>\r\n                    <UserProfileProvider>\r\n                        <Route path=\"/users\">\r\n                            <UserManager />\r\n                        </Route>\r\n                    </UserProfileProvider>\r\n                    <UserProfileProvider>\r\n                        <Route path=\"/deactive\">\r\n                            <DeactiveUserManager />\r\n                        </Route>\r\n                    </UserProfileProvider>\r\n                    <UserProfileProvider>\r\n                        <Route path=\"/unapprovedPosts\">\r\n                            <UnapprovedPosts />\r\n                        </Route>\r\n                    </UserProfileProvider> */}\r\n                </>\r\n            );\r\n        } else if (isLoggedIn && !isAdmin()) {\r\n            return <Redirect to=\"/\" />;\r\n        } else {\r\n            return <Redirect to=\"/login\" />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact>\r\n                {isLoggedIn ? <Home /> : <Redirect to=\"/login\" />}\r\n            </Route>\r\n\r\n            <Route path=\"/login\">\r\n                <Login />\r\n            </Route>\r\n            <Route path=\"/register\">\r\n                <Register />\r\n            </Route>\r\n            {authLevel()}\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default ApplicationViews;\r\n","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\UserProfileProvider.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Register.js",["40"],"import React, { useContext, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Input } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport \"./Login.css\";\r\nimport \"./Register.css\"\r\n\r\nconst Register = () => {\r\n    const { register } = useContext(UserProfileContext);\r\n    const [loading, setLoading] = useState(false);\r\n    const [firstName, setFirstName] = useState(\"\");\r\n    const [lastName, setLastName] = useState(\"\");\r\n    const [displayName, setDisplayName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirm, setConfirm] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    const [imageLoading, setImageLoading] = useState(false)\r\n\r\n\r\n    const uploadImage = async e => {\r\n        const files = e.target.files\r\n        setImageLoading(true)\r\n        const data = new FormData()\r\n        data.append('file', files[0])\r\n        data.append('upload_preset', 'vugr9ics')\r\n        const res = await fetch(\r\n            'https://api.cloudinary.com/v1_1/dddadzenw/image/upload',\r\n            {\r\n                method: \"POST\",\r\n                body: data\r\n            }\r\n        )\r\n        const file = await res.json()\r\n        let image = file.secure_url\r\n        localStorage.setItem(\"image\", image)\r\n\r\n        setImageLoading(false)\r\n        const matches = document.querySelectorAll(\".hidden\");\r\n        for (const m of matches) {\r\n            m.style.display = \"block\"\r\n        }\r\n        document.querySelector(\".notHidden\").style.display = \"none\"\r\n    }\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (password !== confirm) {\r\n            toast.error(\"Passwords do not match\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        const imageLocation = localStorage.getItem(\"image\")\r\n        const profile = {\r\n            firstName,\r\n            lastName,\r\n            displayName,\r\n            email,\r\n            imageLocation\r\n        };\r\n        register(profile, password)\r\n            .then((user) => {\r\n                setLoading(false);\r\n                toast.info(`Welcome ${user.displayName}`);\r\n                history.push(\"/\");\r\n                localStorage.removeItem(\"image\")\r\n            })\r\n            .catch((err) => {\r\n                setLoading(false);\r\n                toast.error(\"Invalid email\");\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-form\">\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"avatar bg-primary\">\r\n\r\n                </div>\r\n                <h2 className=\"text-center\">User Register</h2>\r\n                <div className=\"form-group\">\r\n                    <div className='defaultImageContainer'>\r\n                        <img className='defaultImage' src={localStorage.image ? localStorage.image : 'https://build.dfomer.com/wp-content/uploads/2016/04/dummy-post-horisontal-thegem-blog-default.jpg'} />\r\n                    </div>\r\n\r\n                    {imageLoading ? (\r\n                        <h6 className=\"loadingImage\">Loading...</h6>\r\n                    ) : <></>}\r\n\r\n\r\n                    <br />\r\n                    <label htmlFor=\"embedpollfileinput\" className=\"btn btn-block btn-info notHidden\">\r\n                        Upload image\r\n          </label>\r\n                    <input hidden type=\"file\" onChange={uploadImage} className=\"inputfile\" id=\"embedpollfileinput\" />\r\n                </div>\r\n                <div className=\"form-group hidden\">\r\n                    <Input\r\n                        onChange={(e) => setFirstName(e.target.value)}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"firstName\"\r\n                        placeholder=\"First Name\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group hidden\">\r\n                    <Input\r\n                        onChange={(e) => setLastName(e.target.value)}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"lastName\"\r\n                        placeholder=\"Last Name\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group hidden\">\r\n                    <Input\r\n                        onChange={(e) => setDisplayName(e.target.value)}\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"displayName\"\r\n                        placeholder=\"Display Name\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group hidden\">\r\n                    <Input\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        placeholder=\"Email\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group hidden\">\r\n                    <Input\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        name=\"password\"\r\n                        placeholder=\"Password\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group hidden\">\r\n                    <Input\r\n                        onChange={(e) => setConfirm(e.target.value)}\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        name=\"confirmPassword\"\r\n                        placeholder=\"Confirm Password\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group hidden\">\r\n                    <Button type=\"submit\" block color=\"danger\" disabled={loading}>\r\n                        Sign Up\r\n          </Button>\r\n                </div>\r\n                <div className=\"text-center small\">\r\n                    Already have an account?\r\n          <div>\r\n                        <Link to=\"/login\">Log in here</Link>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Login.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Home.js",["41","42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":5,"column":5,"nodeType":"50","messageId":"51","endLine":5,"endColumn":24},{"ruleId":"52","severity":1,"message":"53","line":89,"column":25,"nodeType":"54","endLine":89,"endColumn":205},{"ruleId":"48","severity":1,"message":"55","line":5,"column":12,"nodeType":"50","messageId":"51","endLine":5,"endColumn":17},{"ruleId":"48","severity":1,"message":"56","line":5,"column":19,"nodeType":"50","messageId":"51","endLine":5,"endColumn":27},{"ruleId":"48","severity":1,"message":"57","line":6,"column":13,"nodeType":"50","messageId":"51","endLine":6,"endColumn":21},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'UserProfileProvider' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'posts' is assigned a value but never used.","'setPosts' is assigned a value but never used.","'getToken' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]