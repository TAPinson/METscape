[{"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\index.js":"1","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\App.js":"2","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Register.js":"6","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Login.js":"7","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Home.js":"8","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\AppHeader.js":"9","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\PostProvider.js":"10","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\CategoryBrowser.js":"11","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\ExhibitProvider.js":"12","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\DepartmentFeed.js":"13","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\ExhibitCard.js":"14","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\MyExhibits.js":"15","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\CommentProvider.js":"16","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\MyExhibitCard.js":"17","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\FriendManager.js":"18","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\FriendshipProvider.js":"19","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\MyFeed.js":"20","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\FeedExhibitCard.js":"21","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\CommentEditor.js":"22","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\PostEditor.js":"23"},{"size":690,"mtime":1611936739824,"results":"24","hashOfConfig":"25"},{"size":1035,"mtime":1612380137029,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":3085,"mtime":1612471074415,"results":"28","hashOfConfig":"25"},{"size":5935,"mtime":1612980208339,"results":"29","hashOfConfig":"25"},{"size":6717,"mtime":1611956409876,"results":"30","hashOfConfig":"25"},{"size":2828,"mtime":1612989602317,"results":"31","hashOfConfig":"25"},{"size":1419,"mtime":1613054223398,"results":"32","hashOfConfig":"25"},{"size":3648,"mtime":1613419477473,"results":"33","hashOfConfig":"25"},{"size":4134,"mtime":1613059106213,"results":"34","hashOfConfig":"25"},{"size":1021,"mtime":1612890574877,"results":"35","hashOfConfig":"25"},{"size":4207,"mtime":1612986410143,"results":"36","hashOfConfig":"25"},{"size":1171,"mtime":1612987873696,"results":"37","hashOfConfig":"25"},{"size":3115,"mtime":1613065362819,"results":"38","hashOfConfig":"25"},{"size":1590,"mtime":1613066757718,"results":"39","hashOfConfig":"25"},{"size":2725,"mtime":1612829934347,"results":"40","hashOfConfig":"25"},{"size":5520,"mtime":1613060021706,"results":"41","hashOfConfig":"25"},{"size":2708,"mtime":1613416937701,"results":"42","hashOfConfig":"25"},{"size":2184,"mtime":1612821301035,"results":"43","hashOfConfig":"25"},{"size":1422,"mtime":1612971163607,"results":"44","hashOfConfig":"25"},{"size":6767,"mtime":1613065392206,"results":"45","hashOfConfig":"25"},{"size":2019,"mtime":1612902737209,"results":"46","hashOfConfig":"25"},{"size":2081,"mtime":1612904222277,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"hsmdj7",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\index.js",[],["104","105"],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\App.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\UserProfileProvider.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Register.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Login.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Home.js",["106"],"import React, { useContext, useEffect } from \"react\";\r\nimport { ExhibitContext } from \"../providers/ExhibitProvider\";\r\nimport ExhibitCard from \"../components/ExhibitCard\"\r\nimport \"./Home.css\"\r\n\r\nconst Home = () => {\r\n    const { getExhibitsBySearch, exhibits, setExhibits } = useContext(ExhibitContext);\r\n\r\n    useEffect(() => {\r\n        setExhibits([])\r\n    }, []);\r\n\r\n    let searchTermBuilder = {}\r\n\r\n    const handleSearchTermUpdate = (event) => {\r\n        searchTermBuilder[event.target.id] = event.target.value\r\n    }\r\n\r\n    const sendSearch = () => {\r\n        getExhibitsBySearch(searchTermBuilder.searchTerm)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"search-controls\">\r\n                <input type=\"text\" placeholder=\"What shall we find today?\" id=\"searchTerm\" onChange={handleSearchTermUpdate} />\r\n                <div className=\"searchButton\" onClick={() => sendSearch(searchTermBuilder)} >Search</div>\r\n            </div>\r\n            <div >\r\n                <div className=\"search-view-container\">\r\n                    {\r\n                        exhibits.map((exhibitObj) => {\r\n                            return (\r\n                                <ExhibitCard key={exhibitObj.objectID} exhibit={exhibitObj} />\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Home;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\AppHeader.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\PostProvider.js",["107"],"import React, { useState, createContext, useContext } from \"react\";\r\nimport { UserProfileContext } from \"./UserProfileProvider\"\r\n\r\nexport const PostContext = createContext();\r\n\r\nexport function PostProvider(props) {\r\n    const { getToken } = useContext(UserProfileContext)\r\n    const [posts, setPosts] = useState([]);\r\n    const [post, setPost] = useState([]);\r\n    const [postWasEdited, setPostWasEdited] = useState(0);\r\n    const apiUrl = \"/api/post\";\r\n\r\n    const getPostsByUser = (id) => {\r\n        return getToken().then((token) => {\r\n            return fetch(`${apiUrl}/userposts/${id}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            })\r\n                .then((res) => res.json())\r\n                .then((resp) => {\r\n                    setPosts(resp)\r\n                    return resp\r\n                })\r\n        });\r\n    }\r\n\r\n    const getMyPosts = (id) => {\r\n        return getToken().then((token) => {\r\n            return fetch(`${apiUrl}/userposts/${id}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            })\r\n                .then((res) => res.json())\r\n        });\r\n    }\r\n\r\n    const getFriendsPosts = (id) => {\r\n        return getToken().then((token) => {\r\n            return fetch(`${apiUrl}/friendposts/${id}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            })\r\n                .then((res) => res.json())\r\n                .then((resp) => {\r\n                    setPosts(resp.slice(0, 20))\r\n                    return resp.slice(0, 20)\r\n                })\r\n        })\r\n    }\r\n\r\n    const addPost = (post) => {\r\n        const userId = JSON.parse(localStorage.getItem('userProfile')).id;\r\n        getMyPosts(userId)\r\n            .then((res) => {\r\n                let myPostChecker = []\r\n                res.map((singlePost) => {\r\n                    if (singlePost.metId === post.metId) {\r\n\r\n                        myPostChecker.push(singlePost)\r\n                    }\r\n                })\r\n                if (myPostChecker.length > 0) {\r\n                    alert(\"You've already added this!\")\r\n                }\r\n                if (myPostChecker.length === 0) {\r\n                    post.userProfileId = userId\r\n                    getToken().then((token) => {\r\n                        return fetch(`${apiUrl}`, {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                                Authorization: `Bearer ${token}`\r\n                            },\r\n                            body: JSON.stringify(post)\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n    const deletePost = (id) => {\r\n        return getToken().then((token) => {\r\n            return fetch(`${apiUrl}/delete/${id}`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const editPost = (post) => {\r\n        return getToken().then((token) => {\r\n            return fetch(`${apiUrl}/update/${post.id}`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(post)\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <PostContext.Provider\r\n            value={{\r\n                post,\r\n                setPost,\r\n                setPosts,\r\n                posts,\r\n                addPost,\r\n                getPostsByUser,\r\n                getFriendsPosts,\r\n                deletePost,\r\n                editPost,\r\n                postWasEdited,\r\n                setPostWasEdited\r\n            }}\r\n        >\r\n            {props.children}\r\n        </PostContext.Provider>\r\n    );\r\n}","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\CategoryBrowser.js",["108"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ExhibitContext } from \"../providers/ExhibitProvider\";\r\nimport './CategoryBrowser.css';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nexport const CategoryBrowser = () => {\r\n    const { departments, getAllDepartments } = useContext(ExhibitContext);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getAllDepartments()\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"departments-container view-container\">\r\n            {departments.map((department) => {\r\n                return (\r\n                    <div className=\"department-card\"\r\n                        key={department.departmentId}\r\n                        onClick={() => {\r\n                            history.push(`/departmentfeed/${department.departmentId}`)\r\n                        }}>\r\n                        {department.displayName}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CategoryBrowser;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\ExhibitProvider.js",["109","110","111"],"import React, { useState, createContext } from \"react\";\r\n\r\n\r\nexport const ExhibitContext = createContext();\r\n\r\nexport function ExhibitProvider(props) {\r\n\r\n    const singleExhibitUrl = \"https://collectionapi.metmuseum.org/public/collection/v1/objects\";\r\n\r\n    const [exhibit, setExhibit] = useState([]);\r\n    const [exhibits, setExhibits] = useState([]);\r\n    const [departments, setDepartments] = useState([]);\r\n    const [department, setDepartment] = useState([]);\r\n\r\n    const getExhibitById = (id) => {\r\n        fetch(`${singleExhibitUrl}/${id}`)\r\n            .then((res) => res.json())\r\n            .then((resp) => setExhibit(resp))\r\n    }\r\n\r\n    const exhibitsCompiler = (id) => {\r\n        return fetch(`${singleExhibitUrl}/${id}`)\r\n            .then((res) => res.json())\r\n    }\r\n\r\n\r\n    const getAllDepartments = () => {\r\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/departments`)\r\n            .then((res) => res.json())\r\n            .then((resp) => setDepartments(resp.departments))\r\n    }\r\n\r\n    const getExhibitsByDepartment = (id) => {\r\n        fetch(`https:/collectionapi.metmuseum.org/public/collection/v1/objects?departmentIds=${id}`)\r\n            .then((res) => res.json())\r\n            .then((resp) => {\r\n                //This is where we will do the randomization\r\n                // Random number in the length of the result objectIDs array\r\n                let randomTwenty = Math.floor(Math.random() * resp.objectIDs.length) + 1\r\n                let twentyBelow = randomTwenty - 20\r\n                let getTwenty = resp.objectIDs.slice(twentyBelow, randomTwenty)\r\n                let retrievedObjects = []\r\n                setExhibits([])\r\n                getTwenty.map((metObj) => {\r\n                    exhibitsCompiler(metObj)\r\n                        .then((resp) => {\r\n                            if (!retrievedObjects.includes(resp)) {\r\n                                retrievedObjects.push(resp)\r\n                                setExhibits([...retrievedObjects])\r\n                            }\r\n                        })\r\n                })\r\n            })\r\n    }\r\n\r\n    const getExhibitsBySearch = (searchTerm) => {\r\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=${searchTerm}`)\r\n            .then((res) => res.json())\r\n            .then((resp) => {\r\n                if (resp.objectIDs === null) {\r\n                    return null\r\n                }\r\n                let getTwenty = resp.objectIDs.slice(0, 40)\r\n                let retrievedObjects = []\r\n                setExhibits([])\r\n                getTwenty.map((metObj) => {\r\n                    exhibitsCompiler(metObj)\r\n                        .then((resp) => {\r\n                            if (!retrievedObjects.includes(resp)) {\r\n                                retrievedObjects.push(resp)\r\n                                setExhibits([...retrievedObjects])\r\n                            }\r\n                        })\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n    const getPostExhibits = (posts) => {\r\n        let retrievedObjects = []\r\n        posts.map((post) => {\r\n            exhibitsCompiler(post.metId)\r\n                .then((resp) => {\r\n                    resp.id = post.id\r\n                    retrievedObjects.push(resp)\r\n                    retrievedObjects.sort(function (a, b) {\r\n                        return a.id - b.id;\r\n                    });\r\n                    retrievedObjects.reverse()\r\n                    setExhibits([...retrievedObjects])\r\n                })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ExhibitContext.Provider\r\n            value={{\r\n                exhibit,\r\n                setExhibit,\r\n                getExhibitById,\r\n                getAllDepartments,\r\n                departments,\r\n                setDepartments,\r\n                department,\r\n                setDepartment,\r\n                getExhibitsByDepartment,\r\n                exhibits,\r\n                setExhibits,\r\n                exhibitsCompiler,\r\n                getPostExhibits,\r\n                getExhibitsBySearch\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ExhibitContext.Provider>\r\n    );\r\n}","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\DepartmentFeed.js",["112"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { ExhibitContext } from \"../providers/ExhibitProvider\";\r\nimport { useParams } from 'react-router-dom';\r\nimport ExhibitCard from \"../components/ExhibitCard\"\r\nimport \"./DepartmentFeed.css\"\r\n\r\nconst DepartmentFeed = () => {\r\n    const { getExhibitsByDepartment, exhibits } = useContext(ExhibitContext);\r\n    const { departmentId } = useParams();\r\n    const [toggle, setToggle] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getExhibitsByDepartment(departmentId)\r\n    }, [toggle]);\r\n\r\n    return (\r\n        <div className=\"view-container\">\r\n            <div className=\"department-feed-more-button top-button\" onClick={() => setToggle(toggle + 1)}>More In This Category</div>\r\n            {\r\n\r\n                exhibits.map((exhibitObj) => {\r\n                    return (\r\n                        <ExhibitCard key={exhibitObj.objectID} exhibit={exhibitObj} />\r\n                    )\r\n                })\r\n            }\r\n            <div className=\"department-feed-more-button\" onClick={() => setToggle(toggle + 1)}>More In This Category</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DepartmentFeed;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\ExhibitCard.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\MyExhibits.js",["113"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { PostContext } from \"../providers/PostProvider\";\r\nimport { ExhibitContext } from \"../providers/ExhibitProvider\";\r\nimport MyExhibitCard from \"../components/MyExhibitCard\"\r\nimport \"./MyExhibits.css\"\r\n\r\nconst MyExhibits = () => {\r\n    const { posts, getPostsByUser, deletePost, postWasEdited } = useContext(PostContext);\r\n    const { exhibits, getPostExhibits } = useContext(ExhibitContext);\r\n    const userId = JSON.parse(localStorage.getItem('userProfile')).id;\r\n    const [toggle, setToggle] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getPostsByUser(userId)\r\n            .then((postResponse) => {\r\n                getPostExhibits(postResponse)\r\n            })\r\n    }, [toggle, postWasEdited]);\r\n\r\n    const removePost = (objectID) => {\r\n        const linkedPost = posts.find((post) => {\r\n            return post.metId === objectID\r\n        })\r\n        deletePost(linkedPost.id)\r\n            .then(() => setToggle(toggle + 1))\r\n    }\r\n\r\n    return (\r\n        <div className=\"view-container\">\r\n            {exhibits.map((exhibit) => {\r\n                return (\r\n                    <div key={exhibit.objectID} className=\"my-exhibits-container\">\r\n                        <div>\r\n                            <div className=\"delete-post-button\" onClick={() => removePost(exhibit.objectID)}>Remove</div>\r\n                        </div>\r\n                        <MyExhibitCard exhibit={exhibit} />\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyExhibits;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\CommentProvider.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\MyExhibitCard.js",["114"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { CommentContext } from \"../providers/CommentProvider\"\r\nimport { PostContext } from \"../providers/PostProvider\";\r\nimport { CommentEditButton } from \"./CommentEditor\"\r\nimport \"./ExhibitCard.css\"\r\nimport PostEditor from \"./PostEditor\"\r\n\r\nconst MyExhibitCard = ({ exhibit }) => {\r\n    const { posts } = useContext(PostContext);\r\n    const { addComment, getCommentsByPost, deleteComment } = useContext(CommentContext);\r\n    const [comments, setComments] = useState([]);\r\n    const [toggle, setToggle] = useState(0)\r\n    const userId = JSON.parse(localStorage.getItem('userProfile')).id;\r\n\r\n    useEffect(() => {\r\n        commentsFinder()\r\n    }, [toggle]);\r\n\r\n    const PostFinder = (objectID) => {\r\n        const linkedPost = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        return <PostEditor post={linkedPost} />\r\n    }\r\n\r\n    const InitialComment = (objectID) => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        if (linkedContent === undefined) {\r\n            return null\r\n        }\r\n        linkedContent.year = linkedContent.dateCreated.slice(0, 4)\r\n        linkedContent.month = linkedContent.dateCreated.slice(5, 7)\r\n        linkedContent.day = linkedContent.dateCreated.slice(8, 10)\r\n        return (\r\n            <div className=\"initial-comment\">\r\n                <div>{linkedContent.content}</div>\r\n                <div>{linkedContent.postAuthor} - {linkedContent.month}/{linkedContent.day}/{linkedContent.year}</div>\r\n                <PostFinder objectID={exhibit.objectID} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const commentsFinder = () => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === exhibit.objectID\r\n        })\r\n        getCommentsByPost(linkedContent.id)\r\n            .then((resp) => {\r\n                setComments(resp)\r\n                return resp\r\n            })\r\n    }\r\n\r\n    // New Comment Code\r\n    let newComment = {}\r\n\r\n    const handleContentUpdate = (event) => {\r\n        newComment[event.target.name] = event.target.value\r\n    }\r\n\r\n    const commentCreator = (objectID) => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        newComment.postId = linkedContent.id\r\n        addComment(newComment)\r\n            .then(setToggle(toggle + 1))\r\n    }\r\n\r\n    const CommentContainer = (objectID) => {\r\n        return (\r\n            <section className=\"new-comment-container\">\r\n                <input className=\"comment-input\" type=\"text\" name=\"content\" onChange={handleContentUpdate} />\r\n                <div className=\"submit-new-comment-button\" onClick={() => commentCreator(objectID)}>Submit Comment</div>\r\n            </section>\r\n        )\r\n    }\r\n\r\n    // Delete Comment Code\r\n    const removeComment = (id) => {\r\n        deleteComment(id)\r\n            .then(setToggle(toggle + 1))\r\n    }\r\n\r\n    const DeleteButton = (comment) => {\r\n        if (comment.comment.userProfileId === userId) {\r\n            return (\r\n                <div className=\"comment-delete-button\" onClick={() => {\r\n                    removeComment(comment.comment.id)\r\n                }}>\r\n                    ❌\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const ArtistProvider = (exhibit) => {\r\n        if (exhibit.exhibit.artistDisplayName === \"\") {\r\n            return null\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    Artist: {exhibit.exhibit.artistDisplayName} <br />\r\n                    {exhibit.exhibit.artistDisplayBio} <br />\r\n                    <br />\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div className=\"exhibit-card-container\">\r\n            <div className=\"exhibit-card\">\r\n                <div>\r\n                    <h3> {exhibit.title} </h3>\r\n                </div>\r\n                <img src={exhibit.primaryImage} className=\"exhibit-card-image\" alt=\"exhibit representation\" />\r\n                <div className=\"exhibit-card-details\">\r\n                    <ArtistProvider exhibit={exhibit} />\r\n                    Department: {exhibit.department} <br />\r\n                    Dimensions: {exhibit.dimensions} <br />\r\n                    Medium: {exhibit.medium} <br />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"comment-container\">\r\n            <InitialComment objectID={exhibit.objectID} />\r\n            {comments.map((comment) => {\r\n                comment.year = comment.dateCreated.slice(0, 4)\r\n                comment.month = comment.dateCreated.slice(5, 7)\r\n                comment.day = comment.dateCreated.slice(8, 10)\r\n                return <div key={comment.id} className=\"initial-comment\">\r\n                    <div>{comment.content}</div>\r\n                    <div></div>\r\n                    <div>{comment.commentAuthor} - {comment.month}/{comment.day}/{comment.year}</div>\r\n                    <div className=\"myexhibits-comment-controls\">\r\n                        <DeleteButton comment={comment} />\r\n                        <CommentEditButton comment={comment} />\r\n                    </div>\r\n                </div>\r\n            })}\r\n        </div>\r\n        <CommentContainer objectID={exhibit.objectID} />\r\n    </>\r\n    );\r\n};\r\n\r\nexport default MyExhibitCard;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\FriendManager.js",["115"],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\FriendshipProvider.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\MyFeed.js",["116"],"import React, { useEffect, useContext } from \"react\";\r\nimport { PostContext } from \"../providers/PostProvider\";\r\nimport { ExhibitContext } from \"../providers/ExhibitProvider\";\r\nimport FeedExhibitCard from \"../components/FeedExhibitCard\"\r\nimport \"./MyFeed.css\"\r\n\r\nconst MyFeed = () => {\r\n    const userId = JSON.parse(localStorage.getItem('userProfile')).id;\r\n    const { posts, getFriendsPosts } = useContext(PostContext);\r\n    const { exhibits, getPostExhibits } = useContext(ExhibitContext);\r\n\r\n\r\n    useEffect(() => {\r\n        getFriendsPosts(userId)\r\n            .then((resp) => getPostExhibits(resp))\r\n    }, []);\r\n\r\n    const PostAuthor = (objectID) => {\r\n\r\n        const linkedAuthor = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n\r\n        if (linkedAuthor === undefined) {\r\n            return null\r\n        }\r\n        return <div className=\"myfeed-post-author\">Posted By: {linkedAuthor.postAuthor}</div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"view-container\">\r\n            {exhibits.map((exhibit) => {\r\n                return (\r\n                    <div key={exhibit.objectID} className=\"my-exhibits-container\">\r\n                        <PostAuthor objectID={exhibit.objectID} />\r\n                        <FeedExhibitCard exhibit={exhibit} />\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyFeed;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\FeedExhibitCard.js",["117"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { PostContext } from \"../providers/PostProvider\";\r\nimport { CommentContext } from \"../providers/CommentProvider\"\r\nimport \"./ExhibitCard.css\"\r\nimport Modal from 'react-modal'\r\nimport { CommentEditButton } from \"./CommentEditor\"\r\n\r\nconst FeedExhibitCard = ({ exhibit }) => {\r\n    const { addPost, posts } = useContext(PostContext);\r\n    const { addComment, getCommentsByPost, deleteComment } = useContext(CommentContext);\r\n    const [comments, setComments] = useState([]);\r\n    const [toggle, setToggle] = useState([])\r\n    const userId = JSON.parse(localStorage.getItem('userProfile')).id;\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    Modal.setAppElement('#root')\r\n\r\n    useEffect(() => {\r\n        commentsFinder()\r\n    }, [toggle]);\r\n\r\n    const commentsFinder = () => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === exhibit.objectID\r\n        })\r\n        if (linkedContent === undefined) {\r\n            return null\r\n        }\r\n        getCommentsByPost(linkedContent.id)\r\n            .then((resp) => {\r\n                setComments(resp)\r\n                return resp\r\n            })\r\n    }\r\n\r\n    const InitialComment = (objectID) => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        if (linkedContent === undefined) {\r\n            return null\r\n        }\r\n\r\n        linkedContent.year = linkedContent.dateCreated.slice(0, 4)\r\n        linkedContent.month = linkedContent.dateCreated.slice(5, 7)\r\n        linkedContent.day = linkedContent.dateCreated.slice(8, 10)\r\n\r\n        return (\r\n            <div className=\"initial-comment\">\r\n                <div>{linkedContent.content}</div>\r\n                <div>{linkedContent.postAuthor} - {linkedContent.month}/{linkedContent.day}/{linkedContent.year}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    let newPost = {}\r\n\r\n    const handleContentUpdate = (event) => {\r\n        newPost.metId = exhibit.objectID\r\n        newPost[event.target.id] = event.target.value\r\n    }\r\n\r\n    const handleCommentUpdate = (event) => {\r\n        newComment[event.target.name] = event.target.value\r\n    }\r\n\r\n    const postCreator = () => {\r\n        addPost(newPost)\r\n    }\r\n\r\n    let newComment = {}\r\n\r\n    const CommentContainer = (objectID) => {\r\n        return (\r\n            <section className=\"new-comment-container\">\r\n                <input className=\"comment-input\" type=\"text\" name=\"content\" onChange={handleCommentUpdate} />\r\n                <div className=\"submit-new-comment-button\" onClick={() => commentCreator(objectID)}>Submit Comment</div>\r\n            </section>\r\n        )\r\n    }\r\n\r\n    const commentCreator = (objectID) => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        newComment.postId = linkedContent.id\r\n        addComment(newComment)\r\n            .then(() => setToggle(toggle + 1))\r\n    }\r\n\r\n    const DeleteButton = (comment) => {\r\n        if (comment.comment.userProfileId === userId) {\r\n            return (\r\n                <div className=\"comment-delete-button\" onClick={() => {\r\n                    removeComment(comment.comment.id)\r\n                }}>\r\n                    ❌\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const removeComment = (id) => {\r\n        deleteComment(id)\r\n            .then(() => setToggle(toggle + 1))\r\n    }\r\n\r\n    const ArtistProvider = (exhibit) => {\r\n        if (exhibit.exhibit.artistDisplayName === \"\") {\r\n            return null\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    Artist: {exhibit.exhibit.artistDisplayName} <br />\r\n                    {exhibit.exhibit.artistDisplayBio} <br />\r\n                    <br />\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"exhibit-card-container\">\r\n                <div className=\"exhibit-card\">\r\n                    <h3> {exhibit.title} </h3>\r\n                    <img src={exhibit.primaryImage} className=\"exhibit-card-image\" alt=\"exhibit representation\" />\r\n                    <div className=\"exhibit-card-details\">\r\n                        <ArtistProvider exhibit={exhibit} />\r\n                        Department: {exhibit.department} <br />\r\n                        Dimensions: {exhibit.dimensions} <br />\r\n                        Medium: {exhibit.medium} <br />\r\n                        <div className=\"post-this-button\" onClick={() => setModalIsOpen(true)}>Add to Gallery</div>\r\n\r\n                        <Modal className=\"postModal\" isOpen={modalIsOpen} onRequestClose={() => setModalIsOpen(false)}>\r\n                            <h2>Post Message</h2>\r\n                            <div className=\"modal-stuff\">\r\n                                <input type=\"text\" className=\"modalInput\" id=\"content\" onChange={handleContentUpdate} />\r\n                                <button className=\"modal-save-button\" onClick={evt => {\r\n                                    evt.preventDefault()\r\n                                    postCreator()\r\n                                    setModalIsOpen(false)\r\n                                }}>Save\r\n                                    </button>\r\n                                <div>\r\n                                    <button className=\"modalClose\" onClick={() => setModalIsOpen(false)}>Close</button>\r\n                                </div>\r\n                            </div>\r\n                        </Modal>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"comment-container\">\r\n                <InitialComment objectID={exhibit.objectID} />\r\n                {comments.map((comment) => {\r\n                    comment.year = comment.dateCreated.slice(0, 4)\r\n                    comment.month = comment.dateCreated.slice(5, 7)\r\n                    comment.day = comment.dateCreated.slice(8, 10)\r\n                    return <div key={comment.id} className=\"initial-comment\">\r\n                        <div>{comment.content}</div>\r\n                        <div>{comment.commentAuthor} - {comment.month}/{comment.day}/{comment.year}</div>\r\n                        <div className=\"myexhibits-comment-controls\">\r\n                            <DeleteButton comment={comment} />\r\n                            <CommentEditButton comment={comment} />\r\n                        </div>\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <CommentContainer objectID={exhibit.objectID} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FeedExhibitCard;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\CommentEditor.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\PostEditor.js",[],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":11,"column":8,"nodeType":"124","endLine":11,"endColumn":10,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":62,"column":38,"nodeType":"128","messageId":"129","endLine":62,"endColumn":40},{"ruleId":"122","severity":1,"message":"130","line":14,"column":8,"nodeType":"124","endLine":14,"endColumn":10,"suggestions":"131"},{"ruleId":"126","severity":1,"message":"127","line":44,"column":40,"nodeType":"128","messageId":"129","endLine":44,"endColumn":42},{"ruleId":"126","severity":1,"message":"127","line":66,"column":40,"nodeType":"128","messageId":"129","endLine":66,"endColumn":42},{"ruleId":"126","severity":1,"message":"127","line":81,"column":26,"nodeType":"128","messageId":"129","endLine":81,"endColumn":28},{"ruleId":"122","severity":1,"message":"132","line":14,"column":8,"nodeType":"124","endLine":14,"endColumn":16,"suggestions":"133"},{"ruleId":"122","severity":1,"message":"134","line":18,"column":8,"nodeType":"124","endLine":18,"endColumn":31,"suggestions":"135"},{"ruleId":"122","severity":1,"message":"136","line":17,"column":8,"nodeType":"124","endLine":17,"endColumn":16,"suggestions":"137"},{"ruleId":"122","severity":1,"message":"138","line":14,"column":8,"nodeType":"124","endLine":14,"endColumn":17,"suggestions":"139"},{"ruleId":"122","severity":1,"message":"140","line":16,"column":8,"nodeType":"124","endLine":16,"endColumn":10,"suggestions":"141"},{"ruleId":"122","severity":1,"message":"136","line":19,"column":8,"nodeType":"124","endLine":19,"endColumn":16,"suggestions":"142"},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setExhibits'. Either include it or remove the dependency array.","ArrayExpression",["145"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'getAllDepartments'. Either include it or remove the dependency array.",["146"],"React Hook useEffect has missing dependencies: 'departmentId' and 'getExhibitsByDepartment'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has missing dependencies: 'getPostExhibits', 'getPostsByUser', and 'userId'. Either include them or remove the dependency array.",["148"],"React Hook useEffect has a missing dependency: 'commentsFinder'. Either include it or remove the dependency array.",["149"],"React Hook useEffect has missing dependencies: 'getAllUserProfiles', 'getUserFriends', and 'userId'. Either include them or remove the dependency array.",["150"],"React Hook useEffect has missing dependencies: 'getFriendsPosts', 'getPostExhibits', and 'userId'. Either include them or remove the dependency array.",["151"],["152"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"161","fix":"167"},"Update the dependencies array to be: [setExhibits]",{"range":"168","text":"169"},"Update the dependencies array to be: [getAllDepartments]",{"range":"170","text":"171"},"Update the dependencies array to be: [departmentId, getExhibitsByDepartment, toggle]",{"range":"172","text":"173"},"Update the dependencies array to be: [toggle, postWasEdited, getPostsByUser, userId, getPostExhibits]",{"range":"174","text":"175"},"Update the dependencies array to be: [commentsFinder, toggle]",{"range":"176","text":"177"},"Update the dependencies array to be: [getAllUserProfiles, getUserFriends, toggler, userId]",{"range":"178","text":"179"},"Update the dependencies array to be: [getFriendsPosts, getPostExhibits, userId]",{"range":"180","text":"181"},{"range":"182","text":"177"},[362,364],"[setExhibits]",[418,420],"[getAllDepartments]",[541,549],"[departmentId, getExhibitsByDepartment, toggle]",[747,770],"[toggle, postWasEdited, getPostsByUser, userId, getPostExhibits]",[714,722],"[commentsFinder, toggle]",[661,670],"[getAllUserProfiles, getUserFriends, toggler, userId]",[614,616],"[getFriendsPosts, getPostExhibits, userId]",[813,821]]