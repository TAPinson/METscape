[{"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\index.js":"1","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\App.js":"2","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Register.js":"6","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Login.js":"7","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Home.js":"8","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\AppHeader.js":"9","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\PostProvider.js":"10","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\CategoryBrowser.js":"11","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\ExhibitProvider.js":"12","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\DepartmentFeed.js":"13","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\ExhibitCard.js":"14","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\MyExhibits.js":"15","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\CommentProvider.js":"16","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\MyExhibitCard.js":"17","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\FriendManager.js":"18","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\FriendshipProvider.js":"19","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\MyFeed.js":"20","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\FeedExhibitCard.js":"21","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\CommentEditor.js":"22","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\PostEditor.js":"23"},{"size":690,"mtime":1611936739824,"results":"24","hashOfConfig":"25"},{"size":1035,"mtime":1612380137029,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":3085,"mtime":1612471074415,"results":"28","hashOfConfig":"25"},{"size":5979,"mtime":1612387385470,"results":"29","hashOfConfig":"25"},{"size":6717,"mtime":1611956409876,"results":"30","hashOfConfig":"25"},{"size":2624,"mtime":1611943693723,"results":"31","hashOfConfig":"25"},{"size":193,"mtime":1612829490893,"results":"32","hashOfConfig":"25"},{"size":3681,"mtime":1612736083012,"results":"33","hashOfConfig":"25"},{"size":3112,"mtime":1612820776338,"results":"34","hashOfConfig":"25"},{"size":1034,"mtime":1612464431817,"results":"35","hashOfConfig":"25"},{"size":2908,"mtime":1612812030149,"results":"36","hashOfConfig":"25"},{"size":822,"mtime":1612464471564,"results":"37","hashOfConfig":"25"},{"size":2250,"mtime":1612464185750,"results":"38","hashOfConfig":"25"},{"size":2479,"mtime":1612818612142,"results":"39","hashOfConfig":"25"},{"size":2725,"mtime":1612829934347,"results":"40","hashOfConfig":"25"},{"size":4350,"mtime":1612817589874,"results":"41","hashOfConfig":"25"},{"size":2551,"mtime":1612549247158,"results":"42","hashOfConfig":"25"},{"size":2184,"mtime":1612821301035,"results":"43","hashOfConfig":"25"},{"size":1590,"mtime":1612814587439,"results":"44","hashOfConfig":"25"},{"size":5699,"mtime":1612817686219,"results":"45","hashOfConfig":"25"},{"size":1886,"mtime":1612798435716,"results":"46","hashOfConfig":"25"},{"size":2515,"mtime":1612818194695,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"hsmdj7",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\index.js",[],["104","105"],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\App.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\UserProfileProvider.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Register.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Login.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\Home.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\AppHeader.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\PostProvider.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\CategoryBrowser.js",["106"],"import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { ExhibitContext } from \"../providers/ExhibitProvider\";\r\nimport './CategoryBrowser.css';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nexport const CategoryBrowser = () => {\r\n    const { departments, getAllDepartments } = useContext(ExhibitContext);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getAllDepartments()\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"departments-container\">\r\n            {departments.map((department) => {\r\n                return (\r\n                    <div className=\"department-card\"\r\n                        key={department.departmentId}\r\n                        onClick={() => {\r\n                            history.push(`/departmentfeed/${department.departmentId}`)\r\n                        }}>\r\n                        {department.displayName} - {department.departmentId}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CategoryBrowser;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\ExhibitProvider.js",["107","108"],"import React, { useState, createContext } from \"react\";\r\n\r\n\r\nexport const ExhibitContext = createContext();\r\n\r\nexport function ExhibitProvider(props) {\r\n\r\n    const singleExhibitUrl = \"https://collectionapi.metmuseum.org/public/collection/v1/objects\";\r\n\r\n    const [exhibit, setExhibit] = useState([]);\r\n    const [exhibits, setExhibits] = useState([]);\r\n    const [departments, setDepartments] = useState([]);\r\n    const [department, setDepartment] = useState([]);\r\n\r\n    const getExhibitById = (id) => {\r\n        fetch(`${singleExhibitUrl}/${id}`)\r\n            .then((res) => res.json())\r\n            .then((resp) => setExhibit(resp))\r\n    }\r\n\r\n    const exhibitsCompiler = (id) => {\r\n        return fetch(`${singleExhibitUrl}/${id}`)\r\n            .then((res) => res.json())\r\n    }\r\n\r\n\r\n    const getAllDepartments = () => {\r\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/departments`)\r\n            .then((res) => res.json())\r\n            .then((resp) => setDepartments(resp.departments))\r\n    }\r\n\r\n    const getExhibitsByDepartment = (id) => {\r\n        fetch(`https:/collectionapi.metmuseum.org/public/collection/v1/objects?departmentIds=${id}`)\r\n            .then((res) => res.json())\r\n            .then((resp) => {\r\n                let getTwenty = resp.objectIDs.slice(0, 20)\r\n                let retrievedObjects = []\r\n                setExhibits([])\r\n                getTwenty.map((metObj) => {\r\n                    exhibitsCompiler(metObj)\r\n                        .then((resp) => {\r\n                            if (!retrievedObjects.includes(resp)) {\r\n                                retrievedObjects.push(resp)\r\n                                setExhibits([...retrievedObjects])\r\n                            }\r\n                        })\r\n                })\r\n            })\r\n    }\r\n\r\n    const getPostExhibits = (posts) => {\r\n        let retrievedObjects = []\r\n        posts.map((post) => {\r\n            exhibitsCompiler(post.metId)\r\n                .then((resp) => {\r\n                    resp.id = post.id\r\n                    retrievedObjects.push(resp)\r\n                    retrievedObjects.sort(function (a, b) {\r\n                        return a.id - b.id;\r\n                    });\r\n                    setExhibits([...retrievedObjects])\r\n                })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ExhibitContext.Provider\r\n            value={{\r\n                exhibit,\r\n                setExhibit,\r\n                getExhibitById,\r\n                getAllDepartments,\r\n                departments,\r\n                setDepartments,\r\n                department,\r\n                setDepartment,\r\n                getExhibitsByDepartment,\r\n                exhibits,\r\n                setExhibits,\r\n                exhibitsCompiler,\r\n                getPostExhibits\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ExhibitContext.Provider>\r\n    );\r\n}","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\DepartmentFeed.js",["109"],"import React, { useEffect, useContext } from \"react\";\r\nimport { ExhibitContext } from \"../providers/ExhibitProvider\";\r\nimport { useParams } from 'react-router-dom';\r\nimport ExhibitCard from \"../components/ExhibitCard\"\r\nimport \"./DepartmentFeed.css\"\r\n\r\nconst DepartmentFeed = () => {\r\n    const { getExhibitsByDepartment, exhibits } = useContext(ExhibitContext);\r\n    const { departmentId } = useParams();\r\n\r\n    useEffect(() => {\r\n        getExhibitsByDepartment(departmentId)\r\n    }, []);\r\n\r\n    return (\r\n        <div >\r\n            {\r\n                exhibits.map((exhibitObj) => {\r\n                    return (\r\n                        <ExhibitCard key={exhibitObj.objectID} exhibit={exhibitObj} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DepartmentFeed;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\ExhibitCard.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\MyExhibits.js",["110","111","112"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { PostContext } from \"../providers/PostProvider\";\r\nimport { ExhibitContext } from \"../providers/ExhibitProvider\";\r\nimport { CommentContext } from \"../providers/CommentProvider\"\r\n// import { UserProfileContext } from \"../providers/UserProfileProvider\"\r\nimport MyExhibitCard from \"../components/MyExhibitCard\"\r\nimport PostEditor from \"../components/PostEditor\"\r\nimport \"./MyExhibits.css\"\r\n\r\nconst MyExhibits = () => {\r\n    const { posts, getPostsByUser, deletePost, postWasEdited, setPostWasEdited } = useContext(PostContext);\r\n    const { exhibits, getPostExhibits } = useContext(ExhibitContext);\r\n    // const { getToken } = useContext(UserProfileContext);\r\n    const userId = JSON.parse(localStorage.getItem('userProfile')).id;\r\n    const [toggle, setToggle] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getPostsByUser(userId)\r\n            .then((postResponse) => {\r\n                getPostExhibits(postResponse)\r\n            })\r\n    }, [toggle, postWasEdited]);\r\n\r\n    const PostTitle = (objectID) => {\r\n        const linkedTitle = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        if (linkedTitle === undefined) {\r\n            return null\r\n        }\r\n        return linkedTitle.title\r\n    }\r\n\r\n    const removePost = (objectID) => {\r\n        const linkedPost = posts.find((post) => {\r\n            return post.metId === objectID\r\n        })\r\n        deletePost(linkedPost.id)\r\n            .then(() => setToggle(toggle + 1))\r\n    }\r\n\r\n    const PostFinder = (objectID) => {\r\n        const linkedPost = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        return <PostEditor post={linkedPost} />\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            {exhibits.map((exhibit) => {\r\n                return (\r\n                    <div key={exhibit.objectID} className=\"my-exhibits-container\">\r\n                        <div>\r\n                            <h2><PostTitle objectID={exhibit.objectID} /></h2>\r\n                            <PostFinder objectID={exhibit.objectID} />\r\n                            <div className=\"delete-post-button\" onClick={() => removePost(exhibit.objectID)}>DELETE POST</div>\r\n                        </div>\r\n                        <MyExhibitCard exhibit={exhibit} />\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyExhibits;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\CommentProvider.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\MyExhibitCard.js",["113","114"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { CommentContext } from \"../providers/CommentProvider\"\r\nimport { PostContext } from \"../providers/PostProvider\";\r\nimport { CommentEditButton } from \"./CommentEditor\"\r\nimport \"./ExhibitCard.css\"\r\n\r\nconst MyExhibitCard = ({ exhibit }) => {\r\n    const { posts, postWasEdited } = useContext(PostContext);\r\n    const { addComment, getCommentsByPost, deleteComment } = useContext(CommentContext);\r\n    const [comments, setComments] = useState([]);\r\n    const [toggle, setToggle] = useState(0)\r\n    const userId = JSON.parse(localStorage.getItem('userProfile')).id;\r\n\r\n    useEffect(() => {\r\n        commentsFinder()\r\n    }, [toggle]);\r\n\r\n    const InitialComment = (objectID) => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        if (linkedContent === undefined) {\r\n            return null\r\n        }\r\n        return (\r\n            <div className=\"initial-comment\">\r\n                <div>{linkedContent.content}</div>\r\n                <div>{linkedContent.dateCreated}</div>\r\n                <div>Author: {linkedContent.postAuthor}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const commentsFinder = () => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === exhibit.objectID\r\n        })\r\n        getCommentsByPost(linkedContent.id)\r\n            .then((resp) => {\r\n                setComments(resp)\r\n                return resp\r\n            })\r\n    }\r\n\r\n    // New Comment Code\r\n    let newComment = {}\r\n\r\n    const handleContentUpdate = (event) => {\r\n        newComment[event.target.name] = event.target.value\r\n    }\r\n\r\n    const commentCreator = (objectID) => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        newComment.postId = linkedContent.id\r\n        addComment(newComment)\r\n            .then(setToggle(toggle + 1))\r\n    }\r\n\r\n    const CommentContainer = (objectID) => {\r\n        return (\r\n            <section className=\"new-comment-container\">\r\n                <input className=\"comment-input\" type=\"text\" name=\"content\" onChange={handleContentUpdate} />\r\n                <div className=\"submit-new-comment-button\" onClick={() => commentCreator(objectID)}>Submit Comment</div>\r\n            </section>\r\n        )\r\n    }\r\n\r\n    // Delete Comment Code\r\n    const removeComment = (id) => {\r\n        deleteComment(id)\r\n            .then(setToggle(toggle + 1))\r\n    }\r\n\r\n    const DeleteButton = (comment) => {\r\n        if (comment.comment.userProfileId === userId) {\r\n            return (\r\n                <div className=\"comment-delete-button\" onClick={() => {\r\n                    removeComment(comment.comment.id)\r\n                }}>\r\n                    ❌\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div className=\"exhibit-card-container\">\r\n            <div className=\"exhibit-card\">\r\n                <div>\r\n                    <h3> {exhibit.title} </h3>\r\n                </div>\r\n                <img src={exhibit.primaryImage} className=\"exhibit-card-image\" alt=\"exhibit representation\" />\r\n                <div className=\"exhibit-card-details\">\r\n                    From: {exhibit.country} <br />\r\n                    Department: {exhibit.department} <br />\r\n                    Dimensions: {exhibit.dimensions} <br />\r\n                    Medium: {exhibit.medium} <br />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <InitialComment objectID={exhibit.objectID} />\r\n        <div>\r\n            {comments.map((comment) => {\r\n                return <div key={comment.id} className=\"initial-comment\">\r\n                    <div>{comment.content}</div>\r\n                    <div>{comment.dateCreated}</div>\r\n                    <div>Author: {comment.commentAuthor}</div>\r\n                    <div className=\"myexhibits-comment-controls\">\r\n                        <DeleteButton comment={comment} />\r\n                        <CommentEditButton comment={comment} />\r\n                    </div>\r\n                </div>\r\n            })}\r\n        </div>\r\n        <CommentContainer objectID={exhibit.objectID} />\r\n    </>\r\n    );\r\n};\r\n\r\nexport default MyExhibitCard;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\FriendManager.js",["115"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { FriendshipContext } from \"../providers/FriendshipProvider\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport \"./FriendManager.css\"\r\n\r\nconst FriendManager = () => {\r\n    const { getAllUserProfiles, users } = useContext(UserProfileContext);\r\n    const { addFriendship, getUserFriends, friends, deleteFriendship } = useContext(FriendshipContext);\r\n    const userId = JSON.parse(localStorage.getItem('userProfile')).id;\r\n    const [toggler, setToggler] = useState(0)\r\n    useEffect(() => {\r\n        getUserFriends(userId)\r\n        getAllUserProfiles()\r\n    }, [toggler]);\r\n\r\n    const createFriendship = (id) => {\r\n        const newFriend = {\r\n            approverId: id,\r\n            isApproved: 1\r\n        }\r\n        addFriendship(newFriend)\r\n        const toggle = toggler + 1\r\n        setToggler(toggle)\r\n    }\r\n\r\n    const removeFriend = (id) => {\r\n        deleteFriendship(id)\r\n        const toggle = toggler + 1\r\n        setToggler(toggle)\r\n\r\n    }\r\n\r\n    const AddFriendButton = (user) => {\r\n        for (const buddy of friends) {\r\n            if (buddy.approverId === user.user.id || buddy.initiatorId === user.user.id) {\r\n                return (\r\n                    <div className=\"add-friend-button\"\r\n                        onClick={() => {\r\n                            removeFriend(buddy.id)\r\n                        }}>\r\n                        ❌\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"add-friend-button\"\r\n                onClick={() => {\r\n                    createFriendship(user.user.id)\r\n                }}>\r\n                ➕\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Users</h2>\r\n            <div className=\"user-card-container\">\r\n                {users.map((user) => {\r\n                    if (user.id === userId) {\r\n                        return null\r\n                    }\r\n                    else {\r\n                        return (\r\n                            <div className=\"userprofile-card\" key={user.id}>\r\n                                <div>{user.firstName} {user.lastName}</div>\r\n                                <div>{user.userName}</div>\r\n                                <AddFriendButton user={user} />\r\n                            </div>\r\n                        )\r\n                    }\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FriendManager;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\providers\\FriendshipProvider.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\pages\\MyFeed.js",["116"],"import React, { useEffect, useContext } from \"react\";\r\nimport { PostContext } from \"../providers/PostProvider\";\r\nimport { ExhibitContext } from \"../providers/ExhibitProvider\";\r\nimport FeedExhibitCard from \"../components/FeedExhibitCard\"\r\nimport \"./MyFeed.css\"\r\n\r\nconst MyFeed = () => {\r\n    const userId = JSON.parse(localStorage.getItem('userProfile')).id;\r\n    const { posts, getFriendsPosts } = useContext(PostContext);\r\n    const { exhibits, getPostExhibits } = useContext(ExhibitContext);\r\n\r\n\r\n    useEffect(() => {\r\n        getFriendsPosts(userId)\r\n            .then((resp) => getPostExhibits(resp))\r\n    }, []);\r\n\r\n    const PostTitle = (objectID) => {\r\n        const linkedTitle = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        return linkedTitle.title\r\n    }\r\n\r\n    const PostAuthor = (objectID) => {\r\n        const linkedAuthor = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n\r\n        return <div className=\"myfeed-post-author\">Posted By: {linkedAuthor.postAuthor}</div>\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            {exhibits.map((exhibit) => {\r\n                return (\r\n                    <div key={exhibit.objectID} className=\"my-exhibits-container\">\r\n                        <h2><PostTitle objectID={exhibit.objectID} /></h2>\r\n                        <PostAuthor objectID={exhibit.objectID} />\r\n                        <FeedExhibitCard exhibit={exhibit} />\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyFeed;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\FeedExhibitCard.js",["117"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { PostContext } from \"../providers/PostProvider\";\r\nimport { CommentContext } from \"../providers/CommentProvider\"\r\nimport \"./ExhibitCard.css\"\r\nimport Modal from 'react-modal'\r\nimport { CommentEditButton } from \"./CommentEditor\"\r\n\r\nconst FeedExhibitCard = ({ exhibit }) => {\r\n    const { addPost, posts } = useContext(PostContext);\r\n    const { addComment, getCommentsByPost, deleteComment } = useContext(CommentContext);\r\n    const [comments, setComments] = useState([]);\r\n    const [toggle, setToggle] = useState([])\r\n    const userId = JSON.parse(localStorage.getItem('userProfile')).id;\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    Modal.setAppElement('#root')\r\n\r\n    useEffect(() => {\r\n        commentsFinder()\r\n    }, [toggle]);\r\n\r\n    const commentsFinder = () => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === exhibit.objectID\r\n        })\r\n        getCommentsByPost(linkedContent.id)\r\n            .then((resp) => {\r\n                setComments(resp)\r\n                return resp\r\n            })\r\n    }\r\n\r\n    const InitialComment = (objectID) => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        return (\r\n            <div className=\"initial-comment\">\r\n                <div>{linkedContent.content}</div>\r\n                <div>{linkedContent.dateCreated}</div>\r\n                <div>Author: {linkedContent.postAuthor}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    let newPost = {}\r\n\r\n    const handleContentUpdate = (event) => {\r\n        newPost.metId = exhibit.objectID\r\n        newPost[event.target.id] = event.target.value\r\n    }\r\n\r\n    const handleCommentUpdate = (event) => {\r\n        newComment[event.target.name] = event.target.value\r\n    }\r\n\r\n    const postCreator = () => {\r\n        addPost(newPost)\r\n    }\r\n\r\n    let newComment = {}\r\n\r\n    const CommentContainer = (objectID) => {\r\n        return (\r\n            <section className=\"new-comment-container\">\r\n                <input className=\"comment-input\" type=\"text\" name=\"content\" onChange={handleCommentUpdate} />\r\n                <div className=\"submit-new-comment-button\" onClick={() => commentCreator(objectID)}>Submit Comment</div>\r\n            </section>\r\n        )\r\n    }\r\n\r\n    const commentCreator = (objectID) => {\r\n        const linkedContent = posts.find((post) => {\r\n            return post.metId === objectID.objectID\r\n        })\r\n        newComment.postId = linkedContent.id\r\n        addComment(newComment)\r\n            .then(() => setToggle(toggle + 1))\r\n    }\r\n\r\n    const DeleteButton = (comment) => {\r\n        if (comment.comment.userProfileId === userId) {\r\n            return (\r\n                <div className=\"comment-delete-button\" onClick={() => {\r\n                    removeComment(comment.comment.id)\r\n                }}>\r\n                    ❌\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return null\r\n        }\r\n    }\r\n    const removeComment = (id) => {\r\n        deleteComment(id)\r\n            .then(() => setToggle(toggle + 1))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"exhibit-card-container\">\r\n                <div className=\"exhibit-card\">\r\n                    <h3> {exhibit.title} </h3>\r\n                    <img src={exhibit.primaryImage} className=\"exhibit-card-image\" alt=\"exhibit representation\" />\r\n                    <div>\r\n                        From: {exhibit.country} <br />\r\n                    Department: {exhibit.department} <br />\r\n                    Dimensions: {exhibit.dimensions} <br />\r\n                    Medium: {exhibit.medium} <br />\r\n                        <div className=\"post-this-button\" onClick={() => setModalIsOpen(true)}>Post This</div>\r\n\r\n                        <Modal className=\"postModal\" isOpen={modalIsOpen} onRequestClose={() => setModalIsOpen(false)}>\r\n                            <h2>Title</h2>\r\n                            <input type=\"text\" className=\"modalInput\" id=\"title\" onChange={handleContentUpdate} />\r\n\r\n                            <h2>Post Message</h2>\r\n                            <input type=\"text\" className=\"modalInput\" id=\"content\" onChange={handleContentUpdate} />\r\n\r\n                            <button onClick={evt => {\r\n                                evt.preventDefault()\r\n                                postCreator()\r\n                                setModalIsOpen(false)\r\n                            }}>Save\r\n                                    </button>\r\n                            <div>\r\n                                <button className=\"modalClose\" onClick={() => setModalIsOpen(false)}>Close</button>\r\n                            </div>\r\n                        </Modal>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <InitialComment objectID={exhibit.objectID} />\r\n            <div>\r\n                {comments.map((comment) => {\r\n                    return <div key={comment.id} className=\"initial-comment\">\r\n                        <div>{comment.content}</div>\r\n                        <div>{comment.dateCreated}</div>\r\n                        <div>{comment.commentAuthor}</div>\r\n                        <div className=\"myexhibits-comment-controls\">\r\n                            <DeleteButton comment={comment} />\r\n                            <CommentEditButton comment={comment} />\r\n                        </div>\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <CommentContainer objectID={exhibit.objectID} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FeedExhibitCard;","C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\CommentEditor.js",[],"C:\\Users\\Travis\\workspace\\METscape\\METscape\\client\\src\\components\\PostEditor.js",["118","119","120","121","122"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { PostContext } from \"../providers/PostProvider\";\r\nimport { CommentContext } from \"../providers/CommentProvider\"\r\nimport { ExhibitContext } from \"../providers/ExhibitProvider\";\r\nimport Modal from 'react-modal'\r\nimport \"./PostEditor.css\"\r\n\r\nconst PostEditor = (post) => {\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    const { posts, getPostsByUser, deletePost, editPost, postWasEdited, setPostWasEdited } = useContext(PostContext);\r\n    const { timeToToggle } = useContext(CommentContext);\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    let editedPost = {\r\n\r\n    }\r\n\r\n    const handlePostUpdate = (event) => {\r\n        editedPost[event.target.name] = event.target.value\r\n    }\r\n\r\n    const postUpdater = (post) => {\r\n        editedPost.id = post.post.id\r\n        editedPost.metId = post.post.metId\r\n        editedPost.dateCreated = post.post.dateCreated\r\n        editedPost.userProfileId = post.post.userProfileId\r\n        if (editedPost.content === undefined) {\r\n            editedPost.content = post.post.content\r\n        }\r\n        if (editedPost.title === undefined) {\r\n            editedPost.title = post.post.title\r\n        }\r\n        editPost(editedPost)\r\n            .then(() => {\r\n                post = editedPost\r\n                setPostWasEdited(postWasEdited + 1)\r\n            })\r\n    }\r\n\r\n    if (post.post === undefined) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <div className=\"post-edit-button\" onClick={() => setModalIsOpen(true)}>Edit Post</div>\r\n            <Modal ariaHideApp={false} className=\"postModal\" isOpen={modalIsOpen} onRequestClose={() => setModalIsOpen(false)}>\r\n                <h2>Title</h2>\r\n                <input type=\"text\" className=\"modalInput\" defaultValue={post.post.title} name=\"title\" onChange={handlePostUpdate} />\r\n\r\n                <h2>Content</h2>\r\n                <input type=\"text\" className=\"modalInput\" defaultValue={post.post.content} name=\"content\" onChange={handlePostUpdate} />\r\n\r\n                <button onClick={evt => {\r\n                    evt.preventDefault()\r\n                    postUpdater(post)\r\n                    setModalIsOpen(false)\r\n                }}>Save\r\n                    </button>\r\n                <div>\r\n                    <button className=\"modalClose\" onClick={() => setModalIsOpen(false)}>Close</button>\r\n                </div>\r\n            </Modal>\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default PostEditor;",{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":14,"column":8,"nodeType":"129","endLine":14,"endColumn":10,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":40,"column":40,"nodeType":"133","messageId":"134","endLine":40,"endColumn":42},{"ruleId":"131","severity":1,"message":"132","line":54,"column":26,"nodeType":"133","messageId":"134","endLine":54,"endColumn":28},{"ruleId":"127","severity":1,"message":"135","line":13,"column":8,"nodeType":"129","endLine":13,"endColumn":10,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":4,"column":10,"nodeType":"139","messageId":"140","endLine":4,"endColumn":24},{"ruleId":"137","severity":1,"message":"141","line":11,"column":63,"nodeType":"139","messageId":"140","endLine":11,"endColumn":79},{"ruleId":"127","severity":1,"message":"142","line":22,"column":8,"nodeType":"129","endLine":22,"endColumn":31,"suggestions":"143"},{"ruleId":"137","severity":1,"message":"144","line":8,"column":20,"nodeType":"139","messageId":"140","endLine":8,"endColumn":33},{"ruleId":"127","severity":1,"message":"145","line":16,"column":8,"nodeType":"129","endLine":16,"endColumn":16,"suggestions":"146"},{"ruleId":"127","severity":1,"message":"147","line":14,"column":8,"nodeType":"129","endLine":14,"endColumn":17,"suggestions":"148"},{"ruleId":"127","severity":1,"message":"149","line":16,"column":8,"nodeType":"129","endLine":16,"endColumn":10,"suggestions":"150"},{"ruleId":"127","severity":1,"message":"145","line":19,"column":8,"nodeType":"129","endLine":19,"endColumn":16,"suggestions":"151"},{"ruleId":"137","severity":1,"message":"152","line":4,"column":10,"nodeType":"139","messageId":"140","endLine":4,"endColumn":24},{"ruleId":"137","severity":1,"message":"153","line":10,"column":13,"nodeType":"139","messageId":"140","endLine":10,"endColumn":18},{"ruleId":"137","severity":1,"message":"154","line":10,"column":20,"nodeType":"139","messageId":"140","endLine":10,"endColumn":34},{"ruleId":"137","severity":1,"message":"155","line":10,"column":36,"nodeType":"139","messageId":"140","endLine":10,"endColumn":46},{"ruleId":"137","severity":1,"message":"156","line":11,"column":13,"nodeType":"139","messageId":"140","endLine":11,"endColumn":25},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllDepartments'. Either include it or remove the dependency array.","ArrayExpression",["159"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'departmentId' and 'getExhibitsByDepartment'. Either include them or remove the dependency array.",["160"],"no-unused-vars","'CommentContext' is defined but never used.","Identifier","unusedVar","'setPostWasEdited' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getPostExhibits', 'getPostsByUser', and 'userId'. Either include them or remove the dependency array.",["161"],"'postWasEdited' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'commentsFinder'. Either include it or remove the dependency array.",["162"],"React Hook useEffect has missing dependencies: 'getAllUserProfiles', 'getUserFriends', and 'userId'. Either include them or remove the dependency array.",["163"],"React Hook useEffect has missing dependencies: 'getFriendsPosts', 'getPostExhibits', and 'userId'. Either include them or remove the dependency array.",["164"],["165"],"'ExhibitContext' is defined but never used.","'posts' is assigned a value but never used.","'getPostsByUser' is assigned a value but never used.","'deletePost' is assigned a value but never used.","'timeToToggle' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"172","fix":"178"},"Update the dependencies array to be: [getAllDepartments]",{"range":"179","text":"180"},"Update the dependencies array to be: [departmentId, getExhibitsByDepartment]",{"range":"181","text":"182"},"Update the dependencies array to be: [toggle, postWasEdited, getPostsByUser, userId, getPostExhibits]",{"range":"183","text":"184"},"Update the dependencies array to be: [commentsFinder, toggle]",{"range":"185","text":"186"},"Update the dependencies array to be: [getAllUserProfiles, getUserFriends, toggler, userId]",{"range":"187","text":"188"},"Update the dependencies array to be: [getFriendsPosts, getPostExhibits, userId]",{"range":"189","text":"190"},{"range":"191","text":"186"},[418,420],"[getAllDepartments]",[485,487],"[departmentId, getExhibitsByDepartment]",[1014,1037],"[toggle, postWasEdited, getPostsByUser, userId, getPostExhibits]",[690,698],"[commentsFinder, toggle]",[661,670],"[getAllUserProfiles, getUserFriends, toggler, userId]",[614,616],"[getFriendsPosts, getPostExhibits, userId]",[813,821]]